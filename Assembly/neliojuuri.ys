
main:
    irmovq pino,%rsp    # pino-osoitin
    irmovq pino,%rbp    # pinon alkuosoite
    irmovq $0,%rdx  # nolla vakio
    irmovq $65536,%rax #maksimi 1 << 16 bit arvo
bitwhile:
    rrmovq %rax,%rcx
    subq %r12,%rcx  #katsotaan onko bit > num
    jg bitshifta  #jos on niin alustusbit loopiin
    irmovq $0, %rcx # alustus rcx res
loopi: #jos ei niin suoraan seuraavaan looppiin
    irmovq $0,%r8
    rrmovq %rax, %r9
    subq %r8,%r9
    je end
    irmovq $0, %r14 # alustus r8 res + bit
    addq %rax,%r14  # r14 + bit
    addq %rcx,%r14  #r14 + res
    rrmovq %r12,%r13 # num muistiin
    subq %r14,%r13  #num - (res + bit) jos > iffis 
    jge iffis
    jmp else
iffis: # if lause
    subq %r14,%r12
res_update: # res paivitys
    jmp resshifta
bitupdate:
    jmp bitshift
else:
    jmp resshift
end:
    brk
    halt
bitshifta:
    irmovq $0,%rdi
    rrmovq %rax,%r10
    call alustusbitkaksshift
    jmp bitwhile
bitshift:
    irmovq $0,%rdi
    rrmovq %rax,%r10
    call alustusbitkaksshift
    jmp loopi
resshift:
    irmovq $0,%rdi
    rrmovq %rcx,%r10
    call alustusbityksshift
    jmp bitshift
resshifta:
    irmovq $0,%rdi 
    rrmovq %rcx,%r10
    call alustusbityksshift
    addq %rax,%rcx
    jmp bitupdate
    
.pos 0x600
alustusbitkaksshift:
    irmovq $0x0004, %r13 #alustus 4 r13 koska 2 bit siirto
    irmovq $0x0001, %r14 #alustus 1 r11 
    irmovq $262143,%r8 #maksimi 18 bit arvo
    irmovq $0, %rdi # vastaus alustus
    jmp bitkaksshift
bitkaksshift:           #shiftataan r10 bittia annetulla arvolla
    irmovq $0, %r9            # alustus r9
    rrmovq %r13, %r9         # r13 r9
    subq %r8, %r9              #katsotaan onko menty rajan yli
    jg loppushiftkaks           # jos on niin loppuun
    rrmovq %r13,%r9         #r13  r9  uudestaan
    andq %r10,%r9         
    subq %rdx,%r9               #katsotaan onko bitti 0
    je tuplauskaks          #jos bitti 0 niin tuplaus muuten myos lisays
    jmp lisayskaks
lisayskaks:
    addq %r14,%rdi          #lisataan bitti arvo vastaukseen
    jmp tuplauskaks
tuplauskaks:
    addq %r13,%r13      #tuplataan r13
    addq %r14,%r14      #tuplataan r11
    jmp bitkaksshift      #uus shifti
loppushiftkaks:
    rrmovq %rdi,%rax
    ret
     
.pos 0x800
alustusbityksshift:
    irmovq $2, %r13 #alustus 2 r13 koska 1 bit siirto
    irmovq $1, %r14 #alustus 1 r11 
    irmovq $65535,%r8 #maksimi 16 bit arvo
    irmovq $0, %rdi # vastaus alustus
bityksshift:           #shiftataan r10 bittia annetulla arvolla
    irmovq $0, %r9            # alustus r9
    rrmovq %r13, %r9         # r13 r9
    subq %r8, %r9              #katsotaan onko menty rajan yli
    jg loppushiftyks           # jos on niin loppuun
    rrmovq %r13,%r9         #r13  r9  uudestaan
    andq %r10,%r9         
    subq %rdx,%r9               #katsotaan onko bitti 0
    je tuplausyks          #jos bitti 0 niin tuplaus muuten myos lisays                  
lisaysyks:
    addq %r14,%rdi          #lisataan bitti arvo vastaukseen
tuplausyks:
    addq %r13,%r13      #tuplataan r13
    addq %r14,%r14      #tuplataan r11
    jmp bityksshift      #uus shifti
loppushiftyks:
    rrmovq %rdi,%rcx
    ret
.pos 0x400
pino:
